Describe Vueim
  Before all
    let V = vital#of('vital')
    let PowerAssert = V.import('Vim.PowerAssert')
    execute PowerAssert.define("PowerAssert")
  End

  Describe g:vueim#re_style_start
    It should match style tag
      PowerAssert '<style>' =~# g:vueim#re_style_start
      PowerAssert '<style lang="stylus">' =~# g:vueim#re_style_start
      PowerAssert '<style lang="stylus" src="./app.styl"></style>' =~# g:vueim#re_style_start
    End
  End

  Describe g:vueim#re_style_start
    It should match style end tag
      PowerAssert '</style>' =~# g:vueim#re_style_end
      PowerAssert '<style lang="stylus" src="./app.styl"></style>' =~# g:vueim#re_style_start
    End
  End

  Describe g:vueim#re_src
    It should match src
      PowerAssert matchstr('<style lang="stylus" src="./app.styl"></style>', g:vueim#re_src) ==# './app.styl'
      PowerAssert matchstr('<style lang="stylus"></style>', g:vueim#re_src) ==# ''
    End
  End

  Describe vueim#re_lang
    It should match lang
      PowerAssert matchstr('<style lang="stylus" src="./app.styl"></style>', g:vueim#re_lang) ==# 'stylus'
      PowerAssert matchstr('<style src="./app.styl"></style>', g:vueim#re_lang) ==# ''
    End
  End

  Describe vueim#get_src
    let buf = [
    \   '<template lang="jade">',
    \   '</template>',
    \   '<script src="./foo.js"></script>',
    \   '<style lang="stylus" src="./app.styl"></style>',
    \ ]

    It should return src
      PowerAssert vueim#get_src('template', buf) ==# ''
      PowerAssert vueim#get_src('script', buf) ==# './foo.js'
      PowerAssert vueim#get_src('style', buf) ==# './app.styl'
    End
  End

  Describe vueim#get_lang
    let buf = [
    \   '<template lang="jade">',
    \   '</template>',
    \   '<script src="./foo.js"></script>',
    \   '<style lang="stylus" src="./app.styl"></style>',
    \ ]

    It should return lang
      PowerAssert vueim#get_lang('template', buf) ==# 'jade'
      PowerAssert vueim#get_lang('script', buf) ==# ''
      PowerAssert vueim#get_lang('style', buf) ==# 'stylus'
    End
  End
End
